package com.capgemini.productapp.test;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.capgemini.productapp.entity.Product;
import com.capgemini.productapp.exception.ProductNotFoundException;
import com.capgemini.productapp.repository.ProductRepository;
import com.capgemini.productapp.service.impl.ProductServiceImpl;
@RunWith(SpringRunner.class)
@SpringBootTest
public class ServiceTest {

	@Mock
	private ProductRepository productRepository;

	@InjectMocks
	private ProductServiceImpl productServiceImpl;
	private MockMvc mockMvc;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(productServiceImpl).build();
	}
	
	@Test
	public void addProductTest()
	{
		Product product = new Product(123, "samsung", "mobile", 11100.0);
		when(productRepository.save(product)).thenReturn(product);
		Product addProduct = productServiceImpl.addProduct(product);
		assertEquals(123, addProduct.getProductId());
	}

	@Test
	public void updateproductTest()
	{
		
	}
	
	@Test
	public void findProductByIdTest() throws ProductNotFoundException
	{
		ToDo toDo = new ToDo(1,"Todo Sample 1",true);
		when(toDoRepository.findOne(1L)).thenReturn(toDo);

		assertEquals(1, result.getId());
		assertEquals("Todo Sample 1", result.getText());
		assertEquals(true, result.isCompleted());
		
		Product product = new Product(123,"oppo","mobile",12000);
		
		
		
		
		when(productRepository.findById(1)).thenReturn(product);
	    Product result=	productServiceImpl.findProductById(123);
		assertEquals(123,result.getProductId());
		assertEquals("oppo",result.getProductName());
		assertEquals("mobile",result.getProductCategory());
		assertEquals(12000,result.getProductPrice());
	}
	
	@Test
	public void deleteProductTest()
	{
		Product product = new Product(123, "samsung", "mobile", 11100.0);
		productServiceImpl.deleteProduct(product);
		verify(productRepository,times(1)).delete(product);
	}
}
