package com.capgemini.productapp.test;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Optional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.capgemini.productapp.entity.Product;
import com.capgemini.productapp.exception.ProductNotFoundException;
import com.capgemini.productapp.repository.ProductRepository;


@RunWith(MockitoJUnitRunner.class)
@SpringBootTest
public class ServiceTest {

	@Mock
	private ProductRepository productRepository;

	@InjectMocks
	private ProductServiceImpl productServiceImpl;
	private MockMvc mockMvc;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(productServiceImpl).build();
	}

	@Test
	public void addProductTest() {
		Product product = new Product(123, "samsung", "mobile", 11100.0);
		when(productRepository.save(product)).thenReturn(product);
		Product addProduct = productServiceImpl.addProduct(product);
		assertEquals(123, addProduct.getProductId());
	}

	@Test
	public void updateproductTest() {

		Product product = new Product(123, "oppo", "mobile", 12000);
		when(productRepository.save(product)).thenReturn(product);
	Product updateProduct = productServiceImpl.updateProduct(product);
	assertEquals(123, updateProduct.getProductId());
	assertEquals("oppo",updateProduct.getProductName());
	assertEquals("mobile",updateProduct.getProductCategory());
	assertEquals(12000,updateProduct.getProductPrice(),1);
		
	}

	@Test
	public void findProductByIdTest() throws ProductNotFoundException {
		
		Product product = new Product(123, "oppo", "mobile", 12000);
		when(productRepository.findById(123)).thenReturn(Optional.of(product));
		Product result = productServiceImpl.findProductById(123);
		assertEquals(123, result.getProductId());
		assertEquals("oppo", result.getProductName());
		assertEquals("mobile", result.getProductCategory());
		assertEquals(12000, result.getProductPrice(), 1);
	}

	@Test
	public void deleteProductTest() {
		Product product = new Product(123, "samsung", "mobile", 11100.0);
		productServiceImpl.deleteProduct(product);
		verify(productRepository, times(1)).delete(product);
	}
}
